
The Prolog4J framework

  In Section~\ref{sec:embedded} I introduced two Prolog implementations which can be embedded 
  into Java applications in an easy and portable way. These implementations make the 
  interaction possible in both directions between Prolog and Java. Although the communication 
  between the Prolog and Java parts of a program is more fluent than at FLIs, since the type 
  system of the languages is radically different, you still have to convert the objects of 
  your application domain to objects representing Prolog terms and vice versa.

  However, an ideal multiparadigm programming framework or language should allow intermixing 
  the constructs of the languages without forcing the programmer to deal with the internal 
  representation of terms in the system. In the current chapter, I propose a multiparadigm 
  programming framework for Java and Prolog, which do not suffer from this weakness.

  The framework is called <Prolog4J> and it has two parts. Its Prolog part defines a library 
  called <OOLibrary>, which allows object-oriented style programming in Prolog. The library 
  allows to define a hierarchy of classes. The purpose of this hierarchy is to introduce 
  <object polymorphism> into Prolog: although the instances of classes are ordinary (compound) 
  terms, the instance of a subclass can stand for an instance of one of its superclass at any 
  place of a program. The library is discussed in Section~\ref{sec:oolibrary}.

  In Section~\ref{sec:prolog4j} I introduce the Java part of the framework that allows running 
  Prolog queries easily from Java. I will show that using the OOLibrary in Prolog, Java types 
  can be mapped into Prolog types, which makes the conversion between Java objects and Prolog 
  terms automatic and natural. Furthermore, using the metadata facility of Java 5, a programming 
  interface can be specified for accessing Prolog rules from Java, through which logic queries 
  can be done with the easiness of method invocations.

* The Prolog4J Framework

  This section describes the Prolog4J Framework, using which you can make Prolog queries 
  from a Java program in an easy way. In contrast with most frameworks, which make it 
  possible to call Prolog code from Java, in Prolog4J there is automatic conversion 
  between Java and Prolog types that makes it possible to use the types of the application 
  domain from both languages.

  The first part of this section present the mapping between the Java and Prolog type systems, 
  based on which the type conversions are automatized. Based on these hidden transformations, 
  the programming interface provides an easy to use way to make Prolog queries and traverse 
  through the solutions. This interface and its use is discussed in Section~\ref{sec:prolog4j_api}. 
  The third part of the section suggests to extract solving goals into special methods, so-called 
  <goal methods> so that they can be solved by ordinary method invocations. As you will see, the 
  body of goal methods can be generated based on the metadata facilities of Java. Additionally, 
  goal methods make it also possible to exploit the advantages of static type checking. In the 
  next point I will discuss, how Prolog4J can be used with OOLibrary together to implement some 
  methods in Prolog. Finally, some details of the implementation will be discussed.

** Automatic conversions

  The framework has been designed to serve as an interface to a Prolog engine, allowing you to
  use the reasoning capabilities of Prolog in the application domain of the program. In 
  accordance with this, it was not a goal to transform arbitrary Java objects to Prolog terms. 
  Instead, only the relevant classes of the application domain are allowed to be converted. 
  The current section specifies the conversion only for the most basic cases. The conversion 
  of other types is presented in Section~\ref{sec:termclasses}.

  With regard to the backwards transformation, the <value> of any Prolog term can be converted 
  to Java, although there is no Java equivalent of unbound Prolog variables as such. Unbound 
  variables are converted to <<<null>>>. Similarly, you can pass <<<null>>> if you solve a goal 
  but do not want to bind a value to one of its variables. In case of bound variables, their 
  value is converted.

  Strings, primitive values and their wrapper objects are converted to atomic terms in the same 
  way as described in the tuProlog Guide (Section~6.1) \cite{tuprolog}. Arrays and instances of
  <<<java.lang.List\<E\>>>> are converted to Prolog lists. Table~\ref{table:type_mapping} 
  summarizes how Java values are converted to tuProlog terms. The types of the first column will 
  be called <convertible types> later on. Note that there is an auxiliary class 
  <<<org.prolog4j.Compound>>>, using which still arbitrary compound terms can be constructed. 
  However, its use is supposed to be as minimal as possible (see Section~\ref{sec:termclasses} 
  later).

  As you can see, the mapping of tuProlog types to Java types is ambiguous. I denoted with italic 
  letters the default target types at backwards conversions. Atoms (<<<Struct>>> objects without 
  arguments) are converted to strings, <<<Int>>> objects to <<<java.lang.Integer>>> objects. 
  Other <<<Struct>>> objects are converted to <<<List>>> objects if they represent a Prolog list. 
  Otherwise, an instance of <<<Compound>>> will be created.

*-----------------------------------------+--------------------------+
|<Java type>                              |<tuProlog type>           |
|(java.lang package)                      |(alice.tuprolog package)  |
*-----------------------------------------+--------------------------+
|<<<char>>>, <<<String>>>                 | <<<Struct>>>             |
*-----------------------------------------+--------------------------+
|<<<byte>>>, <<<short>>>, <<<int>>>,      | <<<Int>>>                |
|<<<Integer>>>                            |                          |
*-----------------------------------------+--------------------------+
|<<<long>>>, <<<Long>>>                   | <<<Long>>>               |
*-----------------------------------------+--------------------------+
|<<<float>>>, <<<Float>>>                 | <<<Float>>>              |
*-----------------------------------------+--------------------------+
|<<<double>>>, <<<Double>>>               | <<<Double>>>             |
*-----------------------------------------+--------------------------+
|<<<byte[]>>>, <<<short[]>>>, <<<int[]>>>, <<<long[]>>>,       | <<<Struct>>> |
|<<<float[]>>>, <<<double[]>>>, <<<char[]>>>, <<<boolean[]>>>, |              |
|<<<Object[]>>>, <<<java.util.List\<E\>>>>                     |              |
*-----------------------------------------+--------------------------+
|<<<boolean>>>, <<<Boolean>>>             | <<<Struct>>> ('true' or 'false') |
*-----------------------------------------+--------------------------+
|<<<org.prolog4j.Compound>>>              | <<<Struct>>>             |
*-----------------------------------------+--------------------------+
  Type mapping


** The Prolog4J API

  In this section I introduce the <<<Prover>>> and <<<Solution\<S\>>>> classes and the 
  <<<SolutionIterator\<S\>>>> interface. The types belong to the <<<org.prolog4j>>> package.
  The public API of the types is shown in Fig.~~???.

  Solving a query can be initiated by one of the <<<solve()>>> methods of the <<<Prover>>> 
  object. (The class is singleton.) Their first argument has to be a goal (String). If a 
  goal should be solved for some specific value of its variables, these values can be passed 
  as additional arguments to the method. If you would not like to bind a value to a variable 
  (used for input/output) you should pass <<<null>>> to it. <<<solve()>>> methods return a 
  <<<Solution\<S\>>>> object where <<<S>>> should be the type of the variable occurring at 
  last in the goal. The methods are generic, the actual type argument to be substituted to 
  <<<S>>> is supposed to be specified before the method name at invocation.

  Using a <<<Solution>>> instance you can check whether the query is satisfiable 
  (<<<isSuccess()>>>), and you can traverse through the solutions if needed. To make this 
  easy, <<<Solution\<S\>>>> implements the <<<Iterable\<S\>>>> interface so that the values 
  bound to the last variable can be walked through simply by a <for-each> loop. If you would 
  like to walk through the values of another variable, not the last one, you have to call the
  <<<on()>>> generic method of the solution, which will return another <<<Iterable>>> object 
  suitable for that.

  Since a query may contain several variables which can get bound during the reasoning, the 
  solutions provide iterators of type <<<SolutionIterator\<S\>>>>. This interface provides 
  additional methods (<<<get()>>>) to access the values of the individual variables by their 
  name. The <<<Solution>>> class also define <<<get()>>> methods that are supposed to be used 
  if you are interested only in the bindings of the first solution, and do not want to find 
  other solutions.

  In some rare cases it may be necessary to pass also the type of a variable to <<<get()>>> 
  or <<<on()>>>. This is the case when you want to retrieve the value of a list as an array, 
  not as a <<<java.util.List>>> object. For this reason these methods have a variant, which 
  can also the type be passed to.

  Finally, the <<<Solution>>> class also provides methods for collecting all solutions. 
  These methods take the collection(s), which the solutions has to be collected into, as 
  their argument(s). For convenience, there are special methods to collect solutions into 
  a <<<Set>>>, a <<<List>>> or an array of lists.
  
------------------------------------------------------------------------------------------
public class Prover {
  public static Prover get();
  public void addTheory(String... clauses);
  public <A> Solution<A> solve(String goal);
  public <A> Solution<A> solve(String goal, Object... values);
  public <A> Solution<A> solve(String goal, String[] varNames, 
                               Object[] values);
}

public class Solution<S> implements Iterable<S> {
  public boolean isSuccess();

  @Override
  public SolutionIterator<S> iterator();
  public <A> Iterable<A> on(final String argName);
  public <A> Iterable<A> on(final String argName, Class<A> type);
  public <A> Iterable<A> get(final String argName);
  public <A> Iterable<A> get(final String arg, Class<A> type);
  public <C extends Collection<? super S>> C collect(C collection);
  public void collect(Collection... colls);
  public Set<S> toSet();
  public List<S> toList();
  public List<?>[] toLists();
}
public interface SolutionIterator<S> extends Iterator<S> {
  <A> A get(String argName);
}
------------------------------------------------------------------------------------------

  The public interface of the Solution class and the SolutionIterator interface

  Fig.~\ref{fig:solution} shows examples for their use. <<<member/2>>> and <<<append/3>>> 
  are ISO Prolog predicates defined by tuProlog. The examples are rather simple, they are 
  only intended to illustrate the basic use of the framework. The first two examples are 
  equivalent with the examples of Fig.~\ref{fig:tuprolog}. As you can see, this solution is 
  much more concise and elegant then the one shown in Fig.~\ref{fig:tuprolog}. You do not 
  have to bother with constructing the query and converting the result back. No type casts 
  are needed. You even do not need to control the process of finding the solutions.

  The third example checks for the existence of a solution, binding a list to the second 
  variable occuring in the query. The fourth example iterates over the values bound to 
  <<<X>>> in the solutions of the same query. The fifth example appends two lists of 
  humans to another. Finally, the last example creates a list (<<<L2>>>) which has to 
  be appended to another list (<<<L1>>>) to get a third one (<<<L12>>>). In the last 
  two examples there is only one solution, which is a list. So, instead of the outer 
  <<<for>>> loop this single solution could have been accessed simply by <<<get()>>>. 
  Note that there are no type casts in the examples.

--------------
public class Prolog4JTest {
  private static final Prover p = Prover.get();
  static {
    p.addTheory("mortal(X) :- human(X).",\
         "human(socrates).", "human(plato).");  }
  public static boolean isMortal(String somebody) {
    return p.solve("mortal(X).", somebody).isSuccess();
  }
  public static List<String> getMortals() {
    List<String> mortals = new ArrayList<String>();
    for (String s: p.<String>solve("mortal(X)."))
      mortals.add(s);
    return mortals;
  }
  public static void main(String[] args) {
    System.out.println(isMortal("socrates")); // true
    System.out.println(getMortals());      // socrates, plato
    
    List<String> philosophers = Arrays.asList("socrates", "plato");
    Solution<?> solution = 
      p.solve("member(X, List).", null, philosophers);
    System.out.println(solution.isSuccess()); // true

    for (String s: solution.<String>on("X"))
      System.out.println(s);               // socrates, plato

    List<String> h1 = Arrays.asList("socrates");
    List<String> h2 = Arrays.asList("thales", "plato");
    for (List<String> humans: 
        p.<List<String>>solve("append(L1, L2, L12).", h1, h2))
      for (String h: humans)
        System.out.println(h);             // socrates, thales and plato

    List<String> h3 = Arrays.asList("socrates", "homeros", "demokritos");
    for (List<String> humans: p.solve("append(L1, L2, L12).", h1,null,h3)
         .<List<String>>on("L2"))
      for (String h: humans)
        System.out.println(h);             // homeros and demokritos
  }}
------

  Applying rules from Java

** Annotations

  The use of the framework can be made even more simple and safe using the metadata facility 
  of Java \cite{metadata}. Using the annotations presented in this section the prover does 
  not require to be referred to directly, and some more checks can be performed statically.

  Prolog theories can be specified by the <<<@Theory>>> annotation. The argument of 
  <<<@Theory>>> is an array of strings, the elements of which represent Prolog clauses. 
  The annotation is processed at load time.

  As discussed in the Section~\ref{sec:prolog4j_api}, Prolog goals can be solved by 
  <<<Prover>>>. When a goal has to be solved several times, it is suggested to define a 
  method for that which makes its use even more simpler. The body of such methods can 
  also be generated by specifying the <<<@Goal>>> annotation for the method. These 
  methods will be called <goal methods> later on. The goal itself can be defined as 
  the default argument of the annotation (<<<value>>>).

  Goal methods can expect arguments of convertible types as discussed in 
  Section~\ref{sec:convertible_types}. The return type of goal methods can be one of the 
  followings:
  
  * <<<boolean>>> or <<<java.lang.Boolean>>> if you are interested only in the 
    satisfiability of the goal,
  * a convertible type if you are interested only in the first solution (or no more 
    solutions are possible) and there is only one output variable whose value important,
  * <<<Solution\<S\>>>>, where <<<S>>> is the type of an <output> variable. Using the 
    returned <<<Solution>>> object, the solutions of a query can be traversed through.

  The formal arguments can be annotated by <<<@In>>> or <<<@InOut>>>, denoting input or 
  input/output arguments, respectively. They can be omitted, the default is <<<@In>>>. The 
  name of the variable in the goal, which the formal argument has to be bound to, can be 
  specified as an argument of these annotations. In default, the arguments bind to the 
  variables in the order of their appearance. ~~ For now, only <<<@In>>> is processed by 
  the tool. <<<@Out>>>  serves only documentation purposes now, but later it could also 
  be used for static type checking.

  The return type (if not <<<boolean>>> or <<<Boolean>>>) can be annotated by <<<@Out>>>
  \footnote{In fact, the annotation belongs not to the return type but the method, 
  although formally it can also be written after the modifiers, directly before the return 
  type.}, which makes it possible to specify the name of the output variable. If not 
  specified, the value of the last variable will be returned.

  Fähndrich and Leino showed how an object-oriented language such as Java or C\# could be 
  extended with <non-null types> \cite{nonnull}. Non-null types provide a type-based 
  approach to detect possible null pointer violations in code statically at compile time. 
  Java Specification Request 308 (JSR-308) \cite{jsr308} proposes an extension to Java's 
  annotation system that permits annotations to appear on nearly any use of a type. (By 
  contrast, Java SE 6 permits annotations only on class/method/field/variable declarations.) 
  Using the extended syntax of JSR-308 the <<<@NonNull>>> annotation can be specified for 
  any reference type. There are prototype implementations available for JSR-308 and the 
  nullness checker \cite{JastAddNonNull}. The changes proposed by JSR-308 are planned to 
  be part of the Java 7 language.

  The <<<@NonNull>>> annotation can be used later (from Java 7 on) to specify <ground> 
  input arguments. This way such situations could be prevented by static type checking 
  where a ground input argument of a goal method would get a <<<null>>> value.

  The body of rule methods can be arbitrary (e.g.\ <<<{ throw null; }>>>), because it will 
  be replaced during the annotation processing. Fig.~\ref{fig:goals} shows an example for 
  the use of Prolog4J annotations. The example is borrowed \cite{pj}, the original version 
  is shown in Fig.~\ref{fig:pj_goals}. As you can see the Prolog4J version is much more 
  concise, without loosing the expressiveness and type safety of P@J.

  At this point it makes sense to specify static goal methods only. However, <term classes>, 
  which are the topic of the next part of the section, may also have non-static goal methods.

------
@Theory({
  "remove([X|Xs],X,Xs).",
  "remove([X|Xs],E,[X|Ys]):-remove(Xs,E,Ys).",
  "permutation([],[]).",
  "permutation(Xs,[X|Ys]):-remove(Xs,X,Zs), permutation(Zs,Ys)."})
public class PermutationTest {
  @Goal("remove(X, Y, Z).")
  static List<Integer> remove(List<Integer> list, Integer i) { throw null; }

  @Goal("permutation(X, Y).")
  static @Out("Y") Solution<List<Integer>> perms(@In("X") List<Integer> list){
    throw null;}
  public static void main(String[] args) {
     List<Integer> list = Arrays.asList(1, 2, 3);
     for (List<Integer> li: perms(list))
       System.out.println(Collections.max(li));
  }
}
------

  Defining goal methods in Prolog4J

-----------------------
@PrologClass (
    clauses = {"remove([X|Xs],X,Xs).",
               "remove([X|Xs],E,[X|Ys]):-remove(Xs,E,Ys).",
               "permutation([],[]).",
               "permutation(Xs,[X|Ys]):-remove(Xs,X,Zs), permutation(Zs,Ys)."})
public abstract class PermutationUtility {
  @PrologMethod (link="remove($1,$2,$0)",
                  style=PrologInvocationKind.FUNCTIONAL)
  abstract @GROUND List<Int> remove(@INPUT @GROUND List<Int> c1,
                                      @INPUT @GROUND Int i);
  @PrologMethod (link="permutation(@1,@2)",
                  multipleOutput=true,
                  style=PrologInvocationKind.RELATIONAL)
  abstract @GROUND Iterable<Compound1<List<Int>>> perms(
           @HIDE @INPUT @GROUND List<Int> c1, @OUTPUT @GROUND Var<List<Int>> c2);
  public static void main(String[] args) throws Exception{
     PermutationUtility pu = Java2Prolog.newInstance(PermutationUtility.class);
     java.util.Collection<Integer> l=new java.util.LinkedList<Integer>();
     l.add(1); l.add(2); l.add(3);
     Var<List<Int>> x = new Var<List<Int>>("X");
     List<Int> list = Term.fromJava(l);
     for (Compound1<List<Int>> compound : pu.perms(list,x)) {
       Collection<Integer> ci = compound.get0().toJava();
       System.out.println(Collections.max(li));
     }
  }
}
--------------------
  Defining Prolog methods in P@J \cite{pj}

** Term classes

  The set of convertible types discussed in Section~\ref{sec:convertible_types} is rather poor. 
  To allow to reason about the objects of your application domain, <term classes> can be 
  defined. Term classes are also regarded as convertible types. A class can be declared a term 
  class by annotating it with <<<@org.prolog4j.Term>>>. The annotation is inherited, so 
  annotating a class with it causes that its subclasses will be term classes as well.

  Processing <<<@Term>>> relies on OOLibrary. An OOLibrary class definition is generated from 
  term classes. 
  
  As noted in \ref{sec:annotations}, term classes, may also have non-static goal methods. In 
  this case the actual object (<<<this>>>) will be bound to the variable called <<<This>>> 
  that is regarded as an input only argument.

-------
@Term
public class Human {
  private String name;
  public Human(String name) { this.name = name; }

  public static void main(String[] args) {
    System.out.println(isMortal("socrates")); // true
    System.out.println(getMortals());      // socrates, plato
    
    List<String> philosophers = Arrays.asList("socrates", "plato");
    Solution<?> solution = p.solve("member(X, List).",null,philosophers);
    System.out.println(solution.isSuccess()); // true

    for (String s: solution.<String>on("X"))
      System.out.println(s);               // socrates, plato

    List<Human> h1 = Arrays.asList(new Human("socrates"));
    List<Human> h2=Arrays.asList(new Human("thales"),new Human("plato"));
    for (List<Human> humans: 
        p.<List<Human>>solve("append(L1, L2, L12).", h1, h2))
      for (Human h: humans)
        System.out.println(h.name);        // socrates, thales and plato

    List<Human> h3 = Arrays.asList(new Human("socrates"),
        new Human("homeros"), new Human("demokritos"));
    for (List<Human> humans: p.solve("append(L1, L2, L12).", h1,null,h3).
          <List<Human>>on("L2"))
      for (Human h: humans)
        System.out.println(h.name);        // homeros and demokritos
  }
}
----------------------
  Applying rules from Java

** Implementation

  The specification of methods annotated with <<<@Goal>>> contains every information to 
  construct a <<<Solution>>> object. The body for these methods are generated at compile 
  time. The annotations are processed by the Pluggable Annotations Framework \cite{plug} 
  of Java 6. Although this framework does not provide means for code generation directly, 
  it gives an environment, through which the whole compiler tree can be manipulated 
  \cite{comptree}. Unfortunately this feature works only with the Sun's Java compilers. 
  tuProlog terms that represent a goal and its input variables are created at the first 
  time the method is invoked then they are cached in a private static field of their class.

  If <<<@In>>>, <<<@Out>>> or <<<@InOut>>> is specified in a goal method, the compile-time 
  annotation processor verifies whether parameters of the annotations occur in the Prolog query.
