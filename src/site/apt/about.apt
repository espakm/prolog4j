
About the project

  Prolog4J is a lightweight, easy-to-use programming interface over Prolog interpreters.
  Prolog4J itself does not contain a Prolog interpreter, but it provides bindings for 
  several Prolog implementations. Currently {{{http://sf.net/projects/tuprolog}tuProlog}}, 
  {{{https://jtrolog.dev.java.net}jTrolog}} and {{{http://sf.net/projects/jlogic}JLog}}
  are supported, but it is easy to develop bindings for other Prolog implementations 
  that are accessible from Java. The required binding can be assigned to an application
  at deployment time.
 
  Prolog4J provides a uniform API for using these Prolog engines. In contrast with the
  APIs of the current Java interfaces, Prolog4J does not intend to be compatible with
  Java 2 and before. Instead, it exploits many features of Java 5 so that accessing
  Prolog can be as more convenient and intuitive as possible.
 
  To achieve this goal, there is a default way of transforming Prolog terms to Java
  objects and vice versa. So, you do not have to bother with constructing terms manually
  before processing a Prolog query. Similarly, the results of a query are transformed
  to regular Java objects, automatically. Moreover, the results can be traversed through
  by a simple <for-each> loop, just as you would do it with a collection from Java 5 on.
 
  Beyond simplifying and unifying the use of Prolog APIs for Java, Prolog4J provides
  some features that are not available in those. For example, Prolog engines (called
  provers) can be achieved through a factory specifying their name, similarly like it 
  is usual at accessing loggers in logger APIs. Besides that Prolog queries can have 
  arguments and they can be stored in a precompiled form so that you can solve them 
  for different set of arguments any times later.
 
  Prolog4J is lightweight in the sense that it does not provide its own set of classes
  for representing terms. Instead, Java objects are converted <directly> to the 
  representation of the used Prolog binding and vice versa.
 
  The project was motivated partially by {{{http://slf4j.org}SLF4J}}, the "Simple
  Logging Facade for Java". Similarly to SLF4J, Prolog4J also unifies several APIs, and
  tries to be as thin as possible. The SLF4J way of implementing the facade has already 
  proven: the project is very popular, it is used by a plenty of {{{http://apache.org}
  Apache}} projects among others.
