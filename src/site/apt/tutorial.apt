~~              -------------------
~~               Prolog4J Tutorial
~~              -------------------
~~               Miklos Espak
~~              -----------------
~~               13.11.2009

Prolog4J Tutorial

  This tutorial contains a fast introduction into the use of Prolog4J.
  
* Installation

  Download the latest stable version of the Prolog4J API and one of the Prolog4J bindings.
  The bindings are functionally compatible with each other, but there may be differences
  between their performance. Moreover, the Prolog4J bindings may allow direct access their 
  wrapped Prolog engine, for the rare case when accessing them through the Prolog4J API
  is not sufficient for you.
  
  Both the Prolog4J API and one Prolog4J binding has to be added to the class path of your
  project. Note that adding several bindings to the class path will cause an error message
  when running the application and Prolog4J will not working.
  
  If you use Maven, add the following repository into the <<<repositories>>> section of 
  the <<<pom.xml>>>:
  
----------------------------------
    <repository>
      <id>dev.inf.unideb.hu</id>
      <name>Archiva Managed Internal Repository</name>
      <url>http://dev.inf.unideb.hu:8090/archiva/repository/internal/</url>
      <releases>
        <enabled>true</enabled>
      </releases>
      <snapshots>
        <enabled>false</enabled>
      </snapshots>
    </repository>
----------------------------------
  
  The following dependencies are available:

------------------
    <dependency>
      <groupId>org.prolog4j</groupId>
      <artifactId>prolog4j-api</artifactId>
      <version>0.2.0</version>
    </dependency>
    <dependency>
      <groupId>org.prolog4j</groupId>
      <artifactId>prolog4j-tuprolog</artifactId>
      <version>0.2.0</version>
    </dependency>
    <dependency>
      <groupId>org.prolog4j</groupId>
      <artifactId>prolog4j-jtrolog</artifactId>
      <version>0.2.0</version>
    </dependency>
    <dependency>
      <groupId>org.prolog4j</groupId>
      <artifactId>prolog4j-jlog</artifactId>
      <version>0.2.0</version>
    </dependency>
------------------

  Please note that you always have to use the prolog4j-api, but you have to choose exactly
  one of the bindings.
  
* Usage

** Processing Prolog queries

  You can solve Prolog queries through a <prover>. Provers can be accessed by the 
  <<<ProverFactory>>> class. Prolog queries can be solved by the <<<solve(String, Object...)>>>
  method of a prover. The method returns a <<<Solution\<S\>>>> object using which the 
  solutions of the query can be examined. The solutions are iterable, so they can be
  iterated over by a for-each loop.

------------------
import org.prolog4j.*;

public class Test {
    public static void main(String[] args) {
        Prover p = ProverFactory.getProver();
        p.loadTheory("likes.pl");
        Solution<String> sol = p.solve("likes(X, peter).");
        // Does somebody like Peter?
        System.out.println("Has solution? " + sol.isSuccess());
        // Who likes Peter?
        for (String who: sol) {
            System.out.println(who);
        }
    }
}
------------------

  The type argument of <<<Solution\<S\>>>> denotes the type of the values
  returned by the solution. Of course, a Prolog goal can contain several 
  variables. At default, the values bound to the last variable of the goal
  are iterated over. The values are automatically converted to regular
  Java objects. The type argument of the <<<Solution>>> must conform with
  the values binded to the variable, otherwise you can get <<<ClassCastException>>>
  later. The details of the conversion will be discussed later.
  
  You can specify the name of the argument whose values you are interested of,
  by the <<<on(String)>>> method in the following way:

------------------
        Solution<String> sol = p.solve("likes(X, peter).").on("X");
------------------

  This is useful when the goal contains several variables and you are not 
  interested of the values of the last one.
  
  If the goal contains several variables, you may be interested of the bindings
  of more than one at the same time. For this reason, the interators returned 
  by the <<<Solution\<S\>>>> objects implement the <<<SolutionIterator\<S\>>>>
  interface that provides an additional <<<get(String)>>> method to achive the 
  value of any variable of the goal at the steps of the solution finding.
  
  You can see this in the following code sample.

------------------
import org.prolog4j.*;

public class Test {
    public static void main(String[] args) {
        Prover p = ProverFactory.getProver();
        Solution<String> sol = p.solve("likes(X, Y).").on("X");
        SolutionIterator<String> si = sol.iterator();
        while (si.hasNext()) {
            String x = si.next();
            String y = si.get("Y");
            System.out.printf("%s likes %s.", x, y);
        }
    }
}
------------------

** Passing arguments to queries

  You can pass Java objects to a Prolog query as arguments. The arguments can be
  specified as additional arguments to the <<<solve>>> method, simply. The places
  of the goal where the arguments has to be substituted into can be denoted by
  <place holders>. A place holder is a pair of curly braces, eventually preceded
  by a variable name.
  
  The arguments of the goal get bound to the place holders in the order of their
  appearance. If you do not want to bind a value to a place holder, you can simply
  pass <<<null>>>.
  
  The use of goal arguments is illustrated by the code sample below. The <<<likes>>>
  method returns the solution for the <<<likes/2>>> predicate for the given arguments.
  Just like the Prolog predicate, the method can also be used for several purposes,
  depending on whether its arguments are bound or not.

------------------
import org.prolog4j.*;

public class Test {

    private static final Prover p = ProverFactory.getProver();
    static {
        p.loadTheory("likes.pl");
    }
    
    public static Solution<String> likes(String x, String y) {
        return p.solve("likes(X{}, {}).", x, y).on("X");
    }
    
    public static void main(String[] args) {
        // Does Susan like Peter?
        System.out.println(likes("susan", "peter").isSuccess());
        // Who likes Peter?
        Solution<String> sol = likes(null, "peter");
        for (String who: sol) {
            System.out.printf("%s likes peter.", who);
        }
    }
}
------------------

** Preprocessed queries

  You may want to solve the same query at several time for possibly different 
  set of arguments. In this case you can create a <<<Query>>> object by the
  <<<Prover#query(String)>>> method. Such queries are stored in a preprocessed 
  way which means that they are parsed by the internal Prolog implementation.
  
  You can solve them at any times later by their <<<solve(Object...)>>> method,
  passing the required arguments.
  
------------------
import org.prolog4j.*;

public class Test {

    private static final Prover p = ProverFactory.getProver();
    private static final Query LIKES;
    static {
        p.loadTheory("likes.pl");
        LIKES = p.query("likes(X{}, Y{}).");
    }
    
    public static Solution<String> likes(String x, String y) {
        return LIKES.solve(x, y).on("X");
    }
    
    public static void main(String[] args) {
        // Does Susan like Peter?
        System.out.println(likes("susan", "peter").isSuccess());
        // Who likes Peter?
        Solution<String> sol = likes(null, "peter");
        for (String who: sol) {
            System.out.printf("%s likes peter.", who);
        }
    }
}
------------------

  If you want to use always the same value for a variable of a query, it is
  worth binding that value to it before solving it. In this way you do not 
  need to pass that value at every time. Moreover, these <pre-bound> values
  are converted only once.
  
  The use of <<<Query#bind(String, Object)>>> is illustrated by the following
  code sample. The example is not very fortunate, because in this case it
  would be more simple to use 'peter' as an atom directly in the query.
  However, it is probably easy to imagine a situation when the value is
  available only at run-time.

------------------
import org.prolog4j.*;

public class Test {

    private static final Prover p = ProverFactory.getProver();
    private static final Query LIKES_PETER;
    static {
        p.loadTheory("likes.pl");
        LIKES_PETER = p.query("likes(X{}, Y{}).");
        LIKES_PETER.bind("X", "peter");
    }
    
    public static Solution<String> likesPeter(String y) {
        return LIKES.solve(y).on("Y");
    }
    
    public static void main(String[] args) {
        // Does Susan like Peter?
        System.out.println(likesPeter("susan").isSuccess());
        // Who likes Peter?
        Solution<String> sol = likesPeter(null);
        for (String who: sol) {
            System.out.printf("%s likes peter.", who);
        }
    }
}
------------------

** Conversion policies

  Prolog4J performs automatic conversions between regular Java objects and
  the objects that represent Prolog terms in the used Prolog backend. The 
  way of conversion is defined by a <conversion policy>. There is a <global
  conversion policy> that can be accessed through the <<<ProverFactory>>>
  class. Besides that every prover has its own policy that relies on the
  global one at default.
  
  Java numbers (<<<java.lang.Number>>>) are converted to Prolog numbers 
  and Java strings (<<<java.lang.String>>>) to Prolog atoms, and vice versa.
  Similarly, Java lists (<<<java.util.List>>>) are converted to Prolog lists,
  and Prolog lists to Java lists. The <<<null>>> value is converted to an
  unbound variable, and unbound variables are converted to <<<null>>>.
  For other variables their value is converted.
  
  Other kinds of objects cannot be converted to terms at default, so you
  cannot use them as an argument of your queries. For backwards conversion,
  however, there is a fail-safe class called <<<Compound>>>. The compound
  terms which cannot be converted using the rules above will be converted
  to a <<<Compound>>> object. 

  You can customize conversion policies (either the global one or the one
  used by a given prover) by registering your own converters into them.
  We distinguish <term converters> and <object converters>. When you 
  register a term converter, you assign it to an atom. From that time on
  that converter will be used for that atom and for the compound terms
  whose functor is that atom.
  
  Regarding the object-term conversion, you can register an object converter
  to a conversion policy. When you register an object converter, you assign
  it to a class. From that time on, that converter will be used for the 
  instances of that class. More precisely, when converting an object to
  a term, the policy will look for a converter registered to its class.
  If it does not found any, it will look for a converter assigned to one 
  of the supertypes of the object's class. If no suitable converter has
  been found, an exception is thrown.
  
  The following example illustrates the use of customizing the conversion
  policies. As you can see, conversion policies provide methods for 
  manipulating terms directly.
  
------------------------
class Human {
	private final String name;
	Human(String name) {
		this.name = name;
	}
	@Override
	public boolean equals(Object obj) {
		return obj instanceof Human && name.equals(((Human) obj).name);
	}
}
public class Test {
	public static void main(String[] args) {
	    Prover p = ProverFactory.getProver();
		final ConversionPolicy cp = p.getConversionPolicy();
		cp.addTermConverter("human", new Converter<Object>() {
			@Override
			public Object convert(Object term) {
				if (cp.getArity(term) == 1) {
					return new Human((String) cp.getArg(term, 0));
				}
				return null;
			}
		});
		Human socrates = p.<Human>solve("H=human(socrates).").get();
		System.out.println(new Human("socrates").equals(socrates)); // true

		cp.addObjectConverter(Human.class, new Converter<Human>() {
			@Override
			public Object convert(Human human) {
				return cp.term("human", cp.convertObject(human.name));
			}
		});
		Human plato = new Human("plato");
		System.out.println(p.solve("{}=human(plato).", plato).isSuccess()); // true
	}
}
------------------------

** Managing a knowledge base

  You can load a Prolog theory from a stream using <<<Prover#loadTheory(InputStream)>>>.
  The result of the method is similar to the <<<consult/1>>> predicate.
  
  You can also add a Prolog theory represented as a string, using
  <<<Prover#addTheory(String)>>>. If the theory contains several facts
  and rules, they can must be separated by new line characters.
  
  If you want to access the same knowledge base from throughout your
  application, then you have to build that knowledge into a prover,
  and use that prover from the desired places. To make accessing
  the required prover easier, provers can be achieved by their
  <name> through <<<ProverFactory#getProver(String)>>>. This method
  will create a prover with a given name at the first time it is
  requested. Later on it will return the same prover for the same name.
  This mechanism is similar to accessing loggers in logger frameworks.

~~** Annotation interface

